#pragma checksum "E:\Projects\RouteMapper\SC.Web\Views\Sales\View_SalesList.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "4ed9d418fb8737fa52ea750599e35207b04a0d90"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Sales_View_SalesList), @"mvc.1.0.view", @"/Views/Sales/View_SalesList.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Sales/View_SalesList.cshtml", typeof(AspNetCore.Views_Sales_View_SalesList))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "E:\Projects\RouteMapper\SC.Web\Views\_ViewImports.cshtml"
using SC.Web;

#line default
#line hidden
#line 2 "E:\Projects\RouteMapper\SC.Web\Views\_ViewImports.cshtml"
using SC.Web.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"4ed9d418fb8737fa52ea750599e35207b04a0d90", @"/Views/Sales/View_SalesList.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9c4354c903c7f5a89f7bed2350beb2f082f3087a", @"/Views/_ViewImports.cshtml")]
    public class Views_Sales_View_SalesList : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/grid.locale-en.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/jquery.jqGrid.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/ui.jqgrid-bootstrap.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/ui.jqgrid-bootstrap4.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/ui.jqgrid-bootstrap-ui.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/jquery-ui.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/ui.jqgrid.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/Custom.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        #pragma warning restore 0649
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "E:\Projects\RouteMapper\SC.Web\Views\Sales\View_SalesList.cshtml"
  
    ViewData["Title"] = "Sales Report";
    Layout = "~/Views/_AdminLayout.cshtml";

#line default
#line hidden
            BeginContext(93, 512, true);
            WriteLiteral(@"<script src=""//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js""></script>
<script src=""//ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/jquery-ui.min.js""></script>
<script type=""text/javascript"">
    jQuery.browser = {};
    (function () {
        jQuery.browser.msie = false;
        jQuery.browser.version = 0;
        if (navigator.userAgent.match(/MSIE ([0-9]+)\./)) {
            jQuery.browser.msie = true;
            jQuery.browser.version = RegExp.$1;
        }
    })();
</script>
");
            EndContext();
            BeginContext(605, 46, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4ed9d418fb8737fa52ea750599e35207b04a0d907226", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(651, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(653, 49, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "4ed9d418fb8737fa52ea750599e35207b04a0d908403", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(702, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(704, 62, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "4ed9d418fb8737fa52ea750599e35207b04a0d909580", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(766, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(768, 63, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "4ed9d418fb8737fa52ea750599e35207b04a0d9010832", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(831, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(833, 65, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "4ed9d418fb8737fa52ea750599e35207b04a0d9012085", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(898, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(900, 52, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "4ed9d418fb8737fa52ea750599e35207b04a0d9013338", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(952, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(954, 52, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "4ed9d418fb8737fa52ea750599e35207b04a0d9014591", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(1006, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(1008, 49, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "4ed9d418fb8737fa52ea750599e35207b04a0d9015846", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(1057, 2902, true);
            WriteLiteral(@"
<div class=""modal fade"" id=""modal-default"" style=""display: none;"" aria-hidden=""true"">
    <div class=""modal-dialog"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h4 class=""modal-title"">Order Status</h4>
                <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                    <span aria-hidden=""true"">×</span>
                </button>
            </div>
            <div class=""modal-body"">
                <div id=""StatuslistDiv""></div>
                <div>
                    <input type=""text"" class=""form-control"" id=""txtStatusChange""/>
                    <input type=""hidden"" id=""hdnStatusChange""/>
                </div>
            </div>
            <div class=""modal-footer justify-content-between"">
                <button type=""button"" class=""btn btn-default"" data-dismiss=""modal"">Close</button>
                <button type=""button"" class=""btn btn-primary"" id=""btnSaveStatusChange"">Add Status</button>");
            WriteLiteral(@"
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>

<div class=""row"">
    <div class=""col-md-12"">
        <div class=""box box-primary"">
            <div class=""box-header with-border"">
                <div class=""col-md-1"">
                    From Date <br /><input type=""text"" class=""form-control datepicker"" id=""serfromdate"" />
                </div>
                <div class=""col-md-1"">
                    To Date<br /> <input type=""text"" class=""form-control datepicker"" id=""sertodate"" />
                </div>
                <div class=""col-md-2"">
                    Reference No <br /><input type=""text"" class=""form-control"" id=""serRefNo"" />
                </div>
                <div class=""col-md-2"">
                    Customer <br />
                    <select id=""serCustomer"" name=""serCustomer"" class=""form-control select2"" data-toggle=""tooltip"" data-trigger=""hover"" data-placement=""top"" data-title=""Department""></sel");
            WriteLiteral(@"ect>
                </div>
                <div class=""col-md-2"">
                    Order Taken By <br />
                    <select id=""serUser"" name=""serUser"" class=""form-control select2"" data-toggle=""tooltip"" data-trigger=""hover"" data-placement=""top"" data-title=""Department""></select>
                </div>
                <div class=""col-md-3"">
                    <br />
                    <button type=""button"" class=""btn btn-primary pull-right"" style=""margin-right: 5px !important; padding: 3px 10px;"" id=""btnExport"">Export</button>
                    <button type=""button"" class=""btn btn-primary pull-right"" style=""margin-right: 5px !important; padding: 3px 10px;"" id=""btnSearch"">Search</button>
                    <button type=""button"" class=""btn btn-primary pull-right"" style=""margin-right: 5px !important; padding: 3px 10px;""");
            EndContext();
            BeginWriteAttribute("onclick", " onclick=\"", 3959, "\"", 4017, 3);
            WriteAttributeValue("", 3969, "location.href=\'", 3969, 15, true);
#line 77 "E:\Projects\RouteMapper\SC.Web\Views\Sales\View_SalesList.cshtml"
WriteAttributeValue("", 3984, Url.Action("NewSales", "Sales"), 3984, 32, false);

#line default
#line hidden
            WriteAttributeValue("", 4016, "\'", 4016, 1, true);
            EndWriteAttribute();
            BeginContext(4018, 19613, true);
            WriteLiteral(@">New</button>
                </div>
            </div>
            <div class=""x_content"">
                <table id=""list-saleslist"" style=""color:black !important"" class=""table table-dark""></table>
            </div>
            <div id=""pager""></div>
        </div>
    </div>
</div>
<script>
    $('#list-saleslist').jqGrid({
        url: '/Report/GetSalesList',
        datatype: 'json',
        colNames: ['Id', 'Order Ref No', 'Order Date', 'Invoice No', 'LpoNo', 'Invoice Date', 'Customer', 'Total', 'Details', 'OrderTakenBy', 'Status', 'Print'],
        colModel: [
            { name: 'id', index: 'id', width: 200, hidden: true },
            { name: 'salesOrder.refno', index: 'salesOrder.refno', width: 200, sorttype: ""date"" },
            { name: 'salesOrder.orderdate', index: 'salesOrder.orderdate', width: 120, formatter: 'date', formatoptions: { srcformat: 'Y/m/d', newformat: 'd-M-Y' } },
            { name: 'invoiceno', index: 'invoiceno', width: 200, sorttype: ""date"" },
           ");
            WriteLiteral(@" { name: 'lpono', index: 'lpono', width: 200, sorttype: ""date"" },
            { name: 'salesdate', index: 'salesdate', width: 120, formatter: 'date', formatoptions: { srcformat: 'Y/m/d', newformat: 'd-M-Y' } },
            { name: 'customer.customerName', index: 'customer.customerName', width: 200 },
            { name: 'total', index: 'total', width: 250 },
            { name: 'details', index: 'details', width: 250 },
            { name: 'salesOrder.applicationUser.username', index: 'salesOrder.applicationUser.username', width: 250 },
            { name: 'status', formatter: addstatus, width: 100 },
            { name: 'print', width: 60, formatter: printInvoice }

        ],
        jsonReader: {
            root: ""rows"",
            page: ""page"",
            total: ""totalPages"",
            records: ""records"",
            repeatitems: false,
            id: ""0""
        },
        subGrid: true,
        rowNum: 250,
        rowList: [250, 500, 1000],
        pager: '#pager',
        s");
            WriteLiteral(@"ortname: 'code',
        sortorder: 'asc',
        //multiselect: true,
        viewrecords: true,
        height: '100%',
        width: '100%',
        sortorder: 'asc',
        loadonce: false,
        autowidth: true,
        shrinkToFit: true,
        scrollOffset: 0,
        emptyrecords: 'No records',
        subGridRowExpanded: function (subgrid_id, row_id) {
            debugger;
            var subgrid_table_id, pager_id;
            subgrid_table_id = subgrid_id + ""_t"";
            pager_id = ""p_"" + subgrid_table_id;
            $(""#"" + subgrid_id).html(""<table id='"" + subgrid_table_id + ""' class='scroll'></table><div id='"" + pager_id + ""' class='scroll'></div>"");
            jQuery(""#"" + subgrid_table_id).jqGrid({
                url: ""/Sales/GetSaleDetails?q=2&SalesId="" + row_id,
                datatype: 'json',
                colNames: ['Id', 'Sales Id', 'Item Name', 'Quantity', 'Price'],
                colModel: [
                    { name: 'id', index: 'Id', editable");
            WriteLiteral(@": false, width: 100, key: true, hidden: true },
                    { name: 'salesId', index: 'salesId', editable: false, width: 100, hidden: true },
                    { name: ""itemMaster.itemName"", index: ""itemMaster.itemName"", width: 100 },
                    {
                        name: ""qty"", index: ""qty"", width: 100, formatter: 'number',
                        summaryTpl: ""Total : {0}  "",
                        summaryType: ""sum""
                    },
                    {
                        name: ""amount"", index: ""amount"", width: 100, formatter: 'number',
                        summaryTpl: ""Total : {0}  "",
                        summaryType: ""sum""
                    }

                ],
                jsonReader: {
                    root: ""rows"",
                    page: ""page"",
                    total: ""totalPages"",
                    records: ""records"",
                    repeatitems: false,
                    id: ""0""
                },
               ");
            WriteLiteral(@" //  pager: pager_id,
                rowNum: 10,
                rowList: [1, 2, 3],
                sortname: 'qty',
                sortorder: ""asc"",
                height: '100%',
                autowidth: true,
                autoencode: true,
                shrinkToFit: true,
                gridview: true,
                grouping: true,
                groupingView: {
                    groupField: [""salesId""],
                    groupColumnShow: [false],
                    groupText: [""<b></b>""],
                    groupOrder: [""asc""],
                    groupSummary: [true],
                    groupCollapse: false

                },
                idPrefix: subgrid_table_id + ""_""
            });
            jQuery(""#"" + subgrid_table_id).jqGrid('navGrid', ""#"" + pager_id, { edit: false, add: false, del: false })
        },
        subGridRowColapsed: function (subgrid_id, row_id) {
            // this function is called before removing the data
            //var ");
            WriteLiteral(@"subgrid_table_id;
            //subgrid_table_id = subgrid_id+""_t"";
            //jQuery(""#""+subgrid_table_id).remove();
        },
        rowNum: 250,
        pager: '#pager',
        rownumbers: true,
        sortname: 'code',
        sortorder: 'asc',
        viewrecords: true,
        height: '100%',
        width: '100%',
        sortorder: 'asc',
        loadonce: false,
        autowidth: true,
        shrinkToFit: true,
        scrollOffset: 0,
        emptyrecords: 'No records',
        grouping: true,
        caption: 'List of Sales'
    }).navGrid('#pager', { edit: false, add: false, del: false, search: false, refresh: false, closeAfterSearch: false },
    );
    jQuery('.datepicker').datepicker({
        dateFormat: 'dd/mm/yy'
    })
    function addstatus(cellvalue, options, rowObject) {
        var Id = rowObject.id;
        var stattext = ''
        if (rowObject.status == null)
            return '';
        switch (rowObject.status) {
            case 1: statte");
            WriteLiteral(@"xt = 'Direct Sales'; break;
            case 2: stattext = 'Order Processed'; break;
            case 3: stattext = 'Order Picked Up'; break;
            case 4: stattext = 'Delivered'; break;
            case 5: stattext = 'Cancelled'; break;
        }
        //return '<a href=""javascript:OpenStatus(' + Id + ');"">' + stattext + '</a>';
        return '<a href=""#"" id=""statbutton"" class=""bluelink"" onclick=""OpenStatus(' + Id + '); return false;"">' + stattext + '</a>'
    }
    function printInvoice(cellvalue, options, rowObject) {
        var Id = rowObject.id;
        if (rowObject.isvat) {
            return '<a href=""javascript:PrintVatInvoice(' + Id + ');"" style=""color:green"" class=""fa fas fa-print""></a>';
        }
        else
            return '<a href=""javascript:Print(' + Id + '); ""  class=""fa fas fa-print""></a>';

    }
    function OpenStatus(Id) {
        debugger;
        $('#hdnStatusChange').val(Id);
        $('#txtStatusChange').val('');
        $.ajax({
            url:");
            WriteLiteral(@" '/Sales/GetStatusChangeList',
            type: 'GET',
            data: { Id: Id },
            dataType: 'json',
            contentType: 'application/json',
            success: function (data) {
                var divstring = '<table class=""table table-bordered""><thead><tr><th style=""width: 10px"">#</th><th>Status</th><th>Done By</th><th>Time</th></tr></thead><tbody>';
                $('#StatuslistDiv').empty();
                for (var i = 0; i < data.length; i++) {
                    var text = data[i].split('&&&');
                    divstring += '<tr><td>' + (i + 1) + '</td><td>' + text[0] + '</td><td>' + text[1] + '</td><td>' + text[2] + '</td></tr>';
                }
                divstring += ""</tbody></table>"";
                $('#StatuslistDiv').append(divstring);
            },
            error: function () {
                console.log('err')
            }
        });
        $('#modal-default').modal('show');
    }
    $(""#btnSaveStatusChange"").on(""click"", function");
            WriteLiteral(@" () {
        debugger;
        var Id = $('#hdnStatusChange').val();
        var text = $('#txtStatusChange').val();
        $.ajax({
            url: '/Sales/SaveStatusChange',
            type: 'GET',
            data: { Id, text },
            dataType: 'json',
            contentType: 'application/json',
            success: function () {
                toastr.success(""Saved Succesfully"");
            },
            error: function () {
                toastr.error('err');
            }
        });
        $('#modal-default').modal('hide');
    })
    function Print(Id) {
        var wnd = window.open("""", """", ""_blank"");
        $.ajax({
            url: ""/Sales/GetSaleDetails?SalesId="" + Id,
            type: 'GET',
            success: function (response) {
                debugger;
                var html = '<!DOCTYPE html><html lang = ""en""><head><meta charset=""utf-8""><title></title><link rel=""stylesheet"" href=""/css/Invoicestyle.css"" media=""all"" /></head><body>';
          ");
            WriteLiteral(@"      var formatted = $.datepicker.formatDate(""M d, yy"", new Date(response.rows[0].sales.salesdate));
                var SalesOrderNum = response.rows[0].sales.salesOrder == null ? """" : response.rows[0].sales.salesOrder.refno;
                var lpono = response.rows[0].sales.lpono == null ? """" : response.rows[0].sales.salesOrder.lpono;
                html += '<header class=""clearfix""><div id=""logo""><img src=""/logo.png""></div><h1>Invoice</h1><div id=""company"" class=""clearfix""><div>' + response.rows[0].sales.invoiceno + '</div><div>' + SalesOrderNum + '</div><div>Lpono: ' + lpono + '</div><div>' + formatted + '</div><div></div><div></div></div>';
                var total = 0;
                html += '<div id=""project""><div>' + response.rows[0].sales.customer.customerName + '</div><div>' + response.rows[0].sales.customer.customerAddress + '</div><div>' + response.rows[0].sales.customer.zipcode + ',' + response.rows[0].sales.customer.city.name + '</div><div>' + response.rows[0].sales.customer.license + ");
            WriteLiteral(@"',' + response.rows[0].sales.customer.taxNo + '</div><div>' + response.rows[0].sales.customer.supportMail + ',' + response.rows[0].sales.customer.supportNo + '</div>';
                html += '</header><main><table><thead><tr><th class=""desc"">ItemName</th><th class=""desc"">Description</th><th>PRICE</th><th>QTY</th><th>TOTAL</th></tr></thead><tbody>';
                for (var i = 0; i < response.rows.length; i++) {
                    html += '<tr><td class=""desc"">' + response.rows[i].itemMaster.itemName + '</td><td class=""desc"">' + response.rows[i].comments + '</td><td class=""unit"">' + response.rows[i].amount + '</td><td class=""qty"">' + response.rows[i].qty + '</td><td class=""total"">' + response.rows[i].amount * response.rows[i].qty + '</td></tr>';
                    total += response.rows[i].amount * response.rows[i].qty;
                }
                //html += '<tr><td class=""service"">Development</td><td class=""desc"">Developing a Content Management System-based Website</td><td class=""unit"">$40.00<");
            WriteLiteral(@"/td><td class=""qty"">80</td><td class=""total"">$3,200.00</td></tr>';
                html += '<tr><tr><td colspan=""3"" class=""grand total"">ITEM TOTAL</td><td class=""grand total"">' + total + '</td></tr>';
                html += '<tr><td colspan=""3"" class=""grand total"">DISCOUNT</td><td class=""grand total"">' + response.rows[0].sales.discount + '</td></tr>';
                html += '<tr><td colspan=""3"" class=""grand total"">GRAND TOTAL</td><td class=""grand total"">' + total - response.rows[0].sales.discount + '</td></tr>';
                html += '</tbody></table><div id=""notices""><div>Notes:</div><div class=""notice"">' + response.rows[0].sales.details + '</div></div></main>';
                html += '<footer>Invoice was created on a computer and is valid without the signature and seal.</footer></body></html>';
                //html += '</body></html>';
                wnd.document.write(html);
            },
            error: function (xhr) {
                alert(""Something went wrong, please try again"");");
            WriteLiteral(@"
            }
        });

    }
    function PrintVatInvoice(Id) {
        var wnd = window.open("""", """", ""_blank"");
        $.ajax({
            url: ""/Sales/GetSaleDetails?SalesId="" + Id,
            type: 'GET',
            success: function (response) {
                debugger;
                var html = '<!DOCTYPE html><html lang = ""en""><head><meta charset=""utf-8""><title></title><link rel=""stylesheet"" href=""/css/Invoicestyle.css"" media=""all"" /></head><body>';
                var formatted = $.datepicker.formatDate(""M d, yy"", new Date(response.rows[0].sales.salesdate));
                var SalesOrderNum = response.rows[0].sales.salesOrder == null ? """" : response.rows[0].sales.salesOrder.refno;
                var lpono = response.rows[0].sales.lpono == null ? """" : response.rows[0].sales.salesOrder.lpono;
                html += '<header class=""clearfix""><img src=""/images/InvoiceHeader.jpeg""><h1>TAX Invoice</h1><div id=""company"" class=""clearfix""><div>' + response.rows[0].sales.invoiceno +");
            WriteLiteral(@" '</div><div>' + SalesOrderNum + '</div><div>Lpono: ' + lpono + '</div><div>' + formatted + '</div><div>TRN No. 100221926700003</div><div></div><div></div></div>';
                var total = 0;
                var vat = 0;
                html += '<div id=""project""><div>' + response.rows[0].sales.customer.customerName + '</div><div>' + response.rows[0].sales.customer.customerAddress + '</div><div>' + response.rows[0].sales.customer.zipcode + ',' + response.rows[0].sales.customer.city.name + '</div><div>' + response.rows[0].sales.customer.license + ',' + response.rows[0].sales.customer.taxNo + '</div><div>' + response.rows[0].sales.customer.supportMail + ',' + response.rows[0].sales.customer.supportNo + '</div>';
                html += '</header><main><table><thead><tr><th class=""desc"">ItemName</th><th class=""desc"">Description</th><th>PRICE</th><th>QTY</th><th>Item Total</th><th>VAT</th><th>Total</th></tr></thead><tbody>';
                for (var i = 0; i < response.rows.length; i++) {
               ");
            WriteLiteral(@"     html += '<tr><td class=""desc"">' + response.rows[i].itemMaster.itemName + '</td><td class=""desc"">' + response.rows[i].comments + '</td><td class=""unit"">' + response.rows[i].amount + '</td><td class=""qty"">' + response.rows[i].qty + '</td><td class=""total"">' + response.rows[i].amount * response.rows[i].qty + '</td><td class=""total"">' + (response.rows[i].amount * response.rows[i].qty) * 0.05 + '</td><td class=""total"">' + ((response.rows[i].amount * response.rows[i].qty) + (response.rows[i].amount * response.rows[i].qty) * 0.05) + '</td></tr>';
                    total += response.rows[i].amount * response.rows[i].qty;
                }
                vat = (Math.round(total * .05 * 100) / 100);
                //html += '<tr><td class=""service"">Development</td><td class=""desc"">Developing a Content Management System-based Website</td><td class=""unit"">$40.00</td><td class=""qty"">80</td><td class=""total"">$3,200.00</td></tr>';
                html += '<tr><tr><td colspan=""6"" class=""grand total"">Amount</td>");
            WriteLiteral(@"<td class=""grand total"">' + total + '</td></tr><tr><td colspan=""6"">Discount</td><td>' + response.rows[0].sales.discount + '</td></tr><tr><td colspan=""6"">VAT</td><td>' + vat + '</td></tr><tr><td colspan=""6"">GRAND TOTAL</td><td>' + (Math.round((total + vat - response.rows[0].sales.discount) * 100) / 100) + '</td></tr>';
                html += '</tbody></table><div id=""notices""><div>Notes:</div><div class=""notice"">' + response.rows[0].sales.details + '</div></div></main>';
                //html += '</body></html>';
                html += '<footer>Invoice was created on a computer and is valid without the signature and seal.<img src=""/images/InvoiceFooter.jpeg""></footer></body></html>';
                wnd.document.write(html);
            },
            error: function (xhr) {
                alert(""Something went wrong, please try again"");
            }
        });

    }
    jQuery(""#btnSearch"").click(function () {
        var serfromdate = $(""#serfromdate"").val();
        var sertodate = $(""#");
            WriteLiteral(@"sertodate"").val();
        var serRefNo = $(""#serRefNo"").val();
        var serCustomer = $(""#serCustomer"").val();
        var serUser = $(""#serUser"").val();
        jQuery(""#list-saleslist"").jqGrid('setGridParam',
            {
                url: ""/Report/SearchSales?serfromdate="" + serfromdate + '&sertodate=' + sertodate + '&serRefNo=' + serRefNo + '&serCustomer=' + serCustomer + '&serUser=' + serUser
                , page: 1
            })
            .trigger(""reloadGrid"");
    });
    $(""#btnExport"").on(""click"", function () {
        createExcelFromGrid(""list-saleslist"", ""saleslist"")
    })
    function createExcelFromGrid(gridID, filename) {
        var grid = $('#' + gridID);
        var rowIDList = grid.getDataIDs();
        var row = grid.getRowData(rowIDList[0]);
        var colNames = [];
        var i = 0;
        var html = '<table border=""1px""><tr>';
        for (var cName in row) {
            if (cName == ""id"" || cName == ""status"" || cName == ""print"") {
            }");
            WriteLiteral(@"
            else {
                colNames[i++] = cName;
                html += '<th>' + cName + '</th>';

            }// Capture Column Names
        }
        html += '</tr>';
        for (var j = 0; j < rowIDList.length; j++) {
            row = grid.getRowData(rowIDList[j]); // Get Each Row
            html += '<tr>';
            for (var i = 0; i < colNames.length; i++) {
                html += '<td bgcolor=""#D0D3D4 "">' + row[colNames[i]] + '</td>'; // Create a CSV delimited with ;
            }
            html += '</tr>';
        }
        html += '</table>';
        var a = document.createElement('a');
        a.id = 'ExcelDL';
        a.href = 'data:application/vnd.ms-excel,' + escape(html);
        a.download = filename ? filename + "".xls"" : 'DataList.xls';
        document.body.appendChild(a);
        a.click(); // Downloads the excel document
        document.getElementById('ExcelDL').remove();
    }

    $.ajax({
        url: '/Company/GetCustomer',
        type: '");
            WriteLiteral(@"GET',
        dataType: 'json',
        success: function (data) {
            var divstring = '<option Value=""0"">Select All</option>';
            $('#serCustomer').empty();
            for (var i = 0; i < data.rows.length; i++) {
                divstring += '<option Value=""' + data.rows[i].id + '"">' + data.rows[i].customerName + '</option>';
            }
            $('#serCustomer').append(divstring);
        },
        error: function () {
            console.log('err')
        }
    });
    $.ajax({
        url: '/Admin/GetApplicationUser',
        type: 'GET',
        dataType: 'json',
        success: function (data) {
            var divstring = '<option Value=""0"">Select All</option>';
            $('#serUser').empty();
            for (var i = 0; i < data.rows.length; i++) {
                divstring += '<option Value=""' + data.rows[i].id + '"">' + data.rows[i].username + '</option>';
            }
            $('#serUser').append(divstring);
        },
        error: funct");
            WriteLiteral("ion () {\r\n            console.log(\'err\')\r\n        }\r\n    });\r\n    $(document).ready(function () {\r\n        jQuery(\'.select2\').select2()\r\n    });\r\n</script>\r\n");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
