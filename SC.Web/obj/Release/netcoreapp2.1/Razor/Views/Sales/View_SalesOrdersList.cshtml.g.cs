#pragma checksum "C:\Working\WorkFromHome\RouteMapper\SC.Web\Views\Sales\View_SalesOrdersList.cshtml" "{ff1816ec-aa5e-4d10-87f7-6f4963833460}" "b083ff262afdecc2c6653acb6c97835e813ab97c"
// <auto-generated/>
#pragma warning disable 1591
[assembly: global::Microsoft.AspNetCore.Razor.Hosting.RazorCompiledItemAttribute(typeof(AspNetCore.Views_Sales_View_SalesOrdersList), @"mvc.1.0.view", @"/Views/Sales/View_SalesOrdersList.cshtml")]
[assembly:global::Microsoft.AspNetCore.Mvc.Razor.Compilation.RazorViewAttribute(@"/Views/Sales/View_SalesOrdersList.cshtml", typeof(AspNetCore.Views_Sales_View_SalesOrdersList))]
namespace AspNetCore
{
    #line hidden
    using System;
    using System.Collections.Generic;
    using System.Linq;
    using System.Threading.Tasks;
    using Microsoft.AspNetCore.Mvc;
    using Microsoft.AspNetCore.Mvc.Rendering;
    using Microsoft.AspNetCore.Mvc.ViewFeatures;
#line 1 "C:\Working\WorkFromHome\RouteMapper\SC.Web\Views\_ViewImports.cshtml"
using SC.Web;

#line default
#line hidden
#line 2 "C:\Working\WorkFromHome\RouteMapper\SC.Web\Views\_ViewImports.cshtml"
using SC.Web.Models;

#line default
#line hidden
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"b083ff262afdecc2c6653acb6c97835e813ab97c", @"/Views/Sales/View_SalesOrdersList.cshtml")]
    [global::Microsoft.AspNetCore.Razor.Hosting.RazorSourceChecksumAttribute(@"SHA1", @"9c4354c903c7f5a89f7bed2350beb2f082f3087a", @"/Views/_ViewImports.cshtml")]
    public class Views_Sales_View_SalesOrdersList : global::Microsoft.AspNetCore.Mvc.Razor.RazorPage<dynamic>
    {
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_0 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/grid.locale-en.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_1 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("src", new global::Microsoft.AspNetCore.Html.HtmlString("~/js/jquery.jqGrid.min.js"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_2 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/ui.jqgrid-bootstrap.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_3 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("rel", new global::Microsoft.AspNetCore.Html.HtmlString("stylesheet"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_4 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/ui.jqgrid-bootstrap4.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_5 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/ui.jqgrid-bootstrap-ui.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_6 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/jquery-ui.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_7 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/ui.jqgrid.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        private static readonly global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute __tagHelperAttribute_8 = new global::Microsoft.AspNetCore.Razor.TagHelpers.TagHelperAttribute("href", new global::Microsoft.AspNetCore.Html.HtmlString("~/css/Custom.css"), global::Microsoft.AspNetCore.Razor.TagHelpers.HtmlAttributeValueStyle.DoubleQuotes);
        #line hidden
        #pragma warning disable 0169
        private string __tagHelperStringValueBuffer;
        #pragma warning restore 0169
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperExecutionContext __tagHelperExecutionContext;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner __tagHelperRunner = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperRunner();
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __backed__tagHelperScopeManager = null;
        private global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager __tagHelperScopeManager
        {
            get
            {
                if (__backed__tagHelperScopeManager == null)
                {
                    __backed__tagHelperScopeManager = new global::Microsoft.AspNetCore.Razor.Runtime.TagHelpers.TagHelperScopeManager(StartTagHelperWritingScope, EndTagHelperWritingScope);
                }
                return __backed__tagHelperScopeManager;
            }
        }
        private global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper;
        #pragma warning disable 1998
        public async override global::System.Threading.Tasks.Task ExecuteAsync()
        {
#line 1 "C:\Working\WorkFromHome\RouteMapper\SC.Web\Views\Sales\View_SalesOrdersList.cshtml"
  
    ViewData["Title"] = "Sales Orders";
    Layout = "~/Views/_AdminLayout.cshtml";

#line default
#line hidden
            BeginContext(93, 514, true);
            WriteLiteral(@"<script src=""//ajax.googleapis.com/ajax/libs/jquery/2.1.1/jquery.min.js""></script>
<script src=""//ajax.googleapis.com/ajax/libs/jqueryui/1.11.2/jquery-ui.min.js""></script>
<script type=""text/javascript"">
    jQuery.browser = {};
    (function () {
        jQuery.browser.msie = false;
        jQuery.browser.version = 0;
        if (navigator.userAgent.match(/MSIE ([0-9]+)\./)) {
            jQuery.browser.msie = true;
            jQuery.browser.version = RegExp.$1;
        }
    })();

</script>
");
            EndContext();
            BeginContext(607, 46, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "9beef3cd788d4857b235c1608828f719", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_0);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(653, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(655, 49, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("script", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.StartTagAndEndTag, "0754fe237aaf4d26a7034267b246c23e", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_1);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(704, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(706, 62, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "25f15bfbd0504e1782643e7f35ccb659", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_2);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(768, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(770, 63, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "73e67e8e85c843a68c4ddf27007d165a", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_4);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(833, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(835, 65, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "e494b045d5cb4847aa240ebe938c6799", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_5);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(900, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(902, 52, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "3ea2fb50a56d4ba6b1ac0b968c1525b4", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_6);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(954, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(956, 52, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "032f8ca42595467493e54f355d6aa3dc", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_7);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(1008, 2, true);
            WriteLiteral("\r\n");
            EndContext();
            BeginContext(1010, 49, false);
            __tagHelperExecutionContext = __tagHelperScopeManager.Begin("link", global::Microsoft.AspNetCore.Razor.TagHelpers.TagMode.SelfClosing, "b9c5378a7909471ca452db15c2936592", async() => {
            }
            );
            __Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper = CreateTagHelper<global::Microsoft.AspNetCore.Mvc.Razor.TagHelpers.UrlResolutionTagHelper>();
            __tagHelperExecutionContext.Add(__Microsoft_AspNetCore_Mvc_Razor_TagHelpers_UrlResolutionTagHelper);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_8);
            __tagHelperExecutionContext.AddHtmlAttribute(__tagHelperAttribute_3);
            await __tagHelperRunner.RunAsync(__tagHelperExecutionContext);
            if (!__tagHelperExecutionContext.Output.IsContentModified)
            {
                await __tagHelperExecutionContext.SetOutputContentAsync();
            }
            Write(__tagHelperExecutionContext.Output);
            __tagHelperExecutionContext = __tagHelperScopeManager.End();
            EndContext();
            BeginContext(1059, 2382, true);
            WriteLiteral(@"
<style>
    .highlightGrid {
        background-color: red;
        color: white;
    }
</style>
<div class=""modal fade"" id=""modal-default"" style=""display: none;"" aria-hidden=""true"">
    <div class=""modal-dialog"">
        <div class=""modal-content"">
            <div class=""modal-header"">
                <h4 class=""modal-title"">Order Status</h4>
                <button type=""button"" class=""close"" data-dismiss=""modal"" aria-label=""Close"">
                    <span aria-hidden=""true"">×</span>
                </button>
            </div>
            <div class=""modal-body"">
                <div id=""StatuslistDiv""></div>
                <div>
                    <input type=""text"" class=""form-control"" id=""txtStatusChange"" />
                    <input type=""hidden"" id=""hdnStatusChange"" />
                </div>
            </div>
            <div class=""modal-footer justify-content-between"">
                <button type=""button"" class=""btn btn-default"" data-dismiss=""modal"">Close</button>
 ");
            WriteLiteral(@"               <button type=""button"" class=""btn btn-primary"" id=""btnSaveStatusChange"">Add Status</button>
            </div>
        </div>
        <!-- /.modal-content -->
    </div>
    <!-- /.modal-dialog -->
</div>
<div class=""row"">
    <div class=""col-md-12"">
        <div class=""box box-primary"">
            <div class=""box-header with-border"">
                <div class=""col-md-2"">
                    From Date <br /><input type=""text"" class=""form-control datepicker"" id=""serfromdate"" />
                </div>
                <div class=""col-md-2"">
                    To Date<br /> <input type=""text"" class=""form-control datepicker"" id=""sertodate"" />
                </div>
                <div class=""col-md-2"">
                    Reference No <br /><input type=""text"" class=""form-control"" id=""serRefNo"" />
                </div>
                <div class=""col-md-3"">
                    Customer <br />
                    <select id=""serCustomer"" name=""serCustomer"" class=""form-control");
            WriteLiteral(@" select2"" data-toggle=""tooltip"" data-trigger=""hover"" data-placement=""top"" data-title=""Department""></select>
                </div>
                <div class=""col-md-3"">
                    <br />
                    <button type=""button"" class=""btn btn-primary pull-right"" style=""margin-right: 5px !important; padding: 3px 10px;""");
            EndContext();
            BeginWriteAttribute("onclick", " onclick=\"", 3441, "\"", 3504, 3);
            WriteAttributeValue("", 3451, "location.href=\'", 3451, 15, true);
#line 77 "C:\Working\WorkFromHome\RouteMapper\SC.Web\Views\Sales\View_SalesOrdersList.cshtml"
WriteAttributeValue("", 3466, Url.Action("NewSalesOrder", "Sales"), 3466, 37, false);

#line default
#line hidden
            WriteAttributeValue("", 3503, "\'", 3503, 1, true);
            EndWriteAttribute();
            BeginContext(3505, 170, true);
            WriteLiteral(">New</button>\r\n                    <!--<button type=\"button\" class=\"btn btn-primary pull-right\" style=\"margin-right: 5px !important; padding: 3px 10px;\" id=\"btnSplit\">-->");
            EndContext();
            BeginContext(3684, 16794, true);
            WriteLiteral(@"<!--</button>-->
                    <button type=""button"" class=""btn btn-primary pull-right"" style=""margin-right: 5px !important; padding: 3px 10px;"" id=""btnExport"">Export</button>
                    <button type=""button"" class=""btn btn-primary pull-right"" style=""margin-right: 5px !important; padding: 3px 10px;"" id=""btnSearch"">Search</button>
                </div>

            </div>
            <div class=""x_content"">
                <table id=""list-salesorder"" style=""color:black !important"" class=""table table-dark""></table>
            </div>
            <div id=""pager""></div>
        </div>
    </div>
</div>
<script>
    $('#list-salesorder').jqGrid({
        url: '/Sales/GetSalesOrder',
        datatype: 'json',
        colNames: ['Id', 'Ref No', 'Date', 'Customer', 'Total', 'Details', 'Delivery Time','Contact','Number', 'Status', 'Created By', 'Edit', 'Delete', 'Print', 'Split'],
        colModel: [
            { name: 'id', index: 'id', width: 200, hidden: true },
            { na");
            WriteLiteral(@"me: 'refno', index: 'refno', width: 200, sorttype: ""date"" },
            { name: 'orderdate', index: 'orderdate', width: 120, formatter: 'date', formatoptions: { srcformat: 'Y/m/d', newformat: 'd-M-Y' } },
            { name: 'customer.customerName', index: 'customer.customerName', width: 200 },
            { name: 'total', index: 'total', width: 250 },
            { name: 'details', index: 'details', width: 250 },
            { name: 'delivery', index: 'delivery', width: 250 },
            { name: 'contactName', index: 'contactName', width: 250 },
            { name: 'contactNumber', index: 'contactNumber', width: 250 },
            { name: 'status', formatter: addstatus, width: 100 },
            { name: 'applicationUser.username', index: 'applicationUser.username', width: 250 },
            { name: 'process', formatter: addedit, width: 100 },
            { name: 'delete', formatter: adddelete, width: 100 },
            { name: 'print', width: 60, formatter: printInvoice },
            { name: ");
            WriteLiteral(@"'Split', width: 60, formatter: SplitInvoice }
        ],
        jsonReader: {
            root: ""rows"",
            page: ""page"",
            total: ""totalPages"",
            records: ""records"",
            repeatitems: false,
            id: ""0""
        },

        subGrid: true,
        rowNum: 250,
        rowList: [250, 500, 1000],
        pager: '#pager',
        sortname: 'code',
        sortorder: 'asc',
        //multiselect: true,
        viewrecords: true,
        height: '100%',
        width: '100%',
        sortorder: 'asc',
        rowattr: function (rd) {
            debugger;
            if ((new Date() - new Date(rd.orderdate)) / (3600 * 1000) > 48) { // verify that the testing is correct in your case
                return { ""class"": ""highlightGrid"" };
            }
        },

        loadonce: false,
        autowidth: true,
        shrinkToFit: true,
        scrollOffset: 0,
        emptyrecords: 'No records',
        subGridRowExpanded: function (subgri");
            WriteLiteral(@"d_id, row_id) {
            debugger;
            var subgrid_table_id, pager_id;
            subgrid_table_id = subgrid_id + ""_t"";
            pager_id = ""p_"" + subgrid_table_id;
            $(""#"" + subgrid_id).html(""<table id='"" + subgrid_table_id + ""' class='scroll'></table><div id='"" + pager_id + ""' class='scroll'></div>"");
            jQuery(""#"" + subgrid_table_id).jqGrid({
                url: ""/Sales/GetSalesOrderDetails?q=2&SalesOrderId="" + row_id,
                datatype: 'json',
                colNames: ['Id', 'Sales Id', 'Item', 'comments', 'Qty', 'Amount'],
                colModel: [
                    { name: 'id', index: 'Id', editable: false, width: 100, key: true, hidden: true },
                    { name: 'salesOrderId', index: 'salesOrderId', editable: false, width: 100, hidden: true },
                    { name: ""itemMaster.itemName"", index: ""itemMaster.itemName"", width: 100 },
                    { name: ""comments"", index: ""comments"", width: 100 },
                    ");
            WriteLiteral(@"{
                        name: ""qty"", index: ""qty"", width: 100, formatter: 'number',
                        summaryTpl: ""Total : {0}  "",
                        summaryType: ""sum""
                    },
                    {
                        name: ""amount"", index: ""amount"", width: 100, formatter: 'number',
                        summaryTpl: ""Total : {0}  "",
                        summaryType: ""sum""
                    }


                ],
                jsonReader: {
                    root: ""rows"",
                    page: ""page"",
                    total: ""totalPages"",
                    records: ""records"",
                    repeatitems: false,
                    id: ""0""
                },
                //  pager: pager_id,
                rowNum: 10,
                rowList: [1, 2, 3],
                sortname: 'qty',
                sortorder: ""asc"",
                height: '100%',
                autowidth: true,
                autoencode: true,
      ");
            WriteLiteral(@"          shrinkToFit: true,
                multiselect: true,
                gridview: true,
                grouping: true,
                groupingView: {
                    groupField: [""salesOrderId""],
                    groupColumnShow: [false],
                    groupText: [""<b></b>""],
                    groupOrder: [""asc""],
                    groupSummary: [true],
                    groupCollapse: false

                },
                idPrefix: subgrid_table_id + ""_""
            });
            jQuery(""#"" + subgrid_table_id).jqGrid('navGrid', ""#"" + pager_id, { edit: false, add: false, del: false })
        },
        subGridRowColapsed: function (subgrid_id, row_id) {
            // this function is called before removing the data
            //var subgrid_table_id;
            //subgrid_table_id = subgrid_id+""_t"";
            //jQuery(""#""+subgrid_table_id).remove();
        },
        rowNum: 250,
        rowList: [250, 500, 1000],
        pager: '#pager',
     ");
            WriteLiteral(@"   sortname: 'code',
        sortorder: 'asc',
        //multiselect: true,
        viewrecords: true,
        height: '100%',
        width: '100%',
        sortorder: 'asc',
        loadonce: false,
        autowidth: true,
        shrinkToFit: true,
        scrollOffset: 0,
        emptyrecords: 'No records',
        grouping: true,
        caption: 'List of Sales Orders'
    }).navGrid('#pager', { edit: false, add: false, del: false, search: false, refresh: false, closeAfterSearch: false },
    );
    jQuery('.datepicker').datepicker({
        dateFormat: 'dd/mm/yy'
    })
    function addstatus(cellvalue, options, rowObject) {
        var Id = rowObject.id;
        var stattext = '';
        if (rowObject.status == null)
            return '';
        switch (rowObject.status) {
            case 1: stattext = 'New Order'; break;
            case 2: stattext = 'Order Processed'; break;
            case 3: stattext = 'Order Picked Up'; break;
            case 4: stattext = 'Deli");
            WriteLiteral(@"vered'; break;
            case 5: stattext = 'Cancelled'; break;
        }

        return '<a href=""#"" id=""statbutton"" class=""bluelink"" onclick=""OpenStatus(' + Id + '); return false;"">' + stattext + '</a>'
    }
    jQuery(""#btnSearch"").click(function () {
        var serfromdate = $(""#serfromdate"").val();
        var sertodate = $(""#sertodate"").val();
        var serRefNo = $(""#serRefNo"").val();
        jQuery(""#list-salesorder"").jqGrid('setGridParam',
            {
                url: ""/Sales/SearchSalesOrders?serfromdate="" + serfromdate + '&sertodate=' + sertodate + '&serRefNo=' + serRefNo
                , page: 1
            })
            .trigger(""reloadGrid"");
    });

    $(""#btnExport"").on(""click"", function () {
        createExcelFromGrid(""list-salesorder"", ""salesorderlist"")
    })
    function createExcelFromGrid(gridID, filename) {
        var grid = $('#' + gridID);
        var rowIDList = grid.getDataIDs();
        var row = grid.getRowData(rowIDList[0]);
        var");
            WriteLiteral(@" colNames = [];
        var i = 0;
        var html = '<table border=""1px""><tr>';
        for (var cName in row) {
            if (cName == ""id"" || cName == ""status"" || cName == ""print"") {
            }
            else {
                colNames[i++] = cName;
                html += '<th>' + cName + '</th>';

            }// Capture Column Names
        }
        html += '</tr>';
        for (var j = 0; j < rowIDList.length; j++) {
            row = grid.getRowData(rowIDList[j]); // Get Each Row
            html += '<tr>';
            for (var i = 0; i < colNames.length; i++) {
                html += '<td bgcolor=""#D0D3D4 "">' + row[colNames[i]] + '</td>'; // Create a CSV delimited with ;
            }
            html += '</tr>';
        }
        html += '</table>';
        var a = document.createElement('a');
        a.id = 'ExcelDL';
        a.href = 'data:application/vnd.ms-excel,' + escape(html);
        a.download = filename ? filename + "".xls"" : 'DataList.xls';
        docum");
            WriteLiteral(@"ent.body.appendChild(a);
        a.click(); // Downloads the excel document
        document.getElementById('ExcelDL').remove();
    }
    function SplitInvoice(cellvalue, options, rowObject) {
        var Id = rowObject.id;
        if (rowObject.status == 1)
            return '<a href=""/Process/SalesOrderSplit?SalesOrderId=' + Id + '"" style=""color:green"" class=""fa fas fa-edit""></a>';
        return '<a href=""#"" style=""color:red"" class=""fa fas fa-edit""></a>';

    }

    function printInvoice(cellvalue, options, rowObject) {
        var Id = rowObject.id;
        return '<a href=""javascript:Print(' + Id + '); ""  class=""fa fas fa-print""></a>';
    }

    function OpenStatus(Id) {
        debugger;
        $('#hdnStatusChange').val(Id);
        $('#txtStatusChange').val('');
        $.ajax({
            url: '/Sales/GetOrderStatusChangeList',
            type: 'GET',
            data: { Id: Id },
            dataType: 'json',
            contentType: 'application/json',
            s");
            WriteLiteral(@"uccess: function (data) {
                var divstring = '<table class=""table table-bordered""><thead><tr><th style=""width: 10px"">#</th><th>Status</th><th>Done By</th><th>Time</th></tr></thead><tbody>';
                $('#StatuslistDiv').empty();
                for (var i = 0; i < data.length; i++) {
                    var text = data[i].split('&&&');
                    divstring += '<tr><td>' + (i + 1) + '</td><td>' + text[0] + '</td><td>' + text[1] + '</td><td>' + text[2] + '</td></tr>';
                }
                divstring += ""</tbody></table>"";
                $('#StatuslistDiv').append(divstring);
            },
            error: function () {
                console.log('err')
            }
        });
        $('#modal-default').modal('show');
    }
    $(""#btnSaveStatusChange"").on(""click"", function () {
        debugger;
        var Id = $('#hdnStatusChange').val();
        var text = $('#txtStatusChange').val();
        $.ajax({
            url: '/Sales/SaveOrderStatu");
            WriteLiteral(@"sChange',
            type: 'GET',
            data: { Id, text },
            dataType: 'json',
            contentType: 'application/json',
            success: function () {
                toastr.success(""Saved Succesfully"");
            },
            error: function () {
                toastr.error('err');
            }
        });
        $('#modal-default').modal('hide');
    })
    function addedit(cellvalue, options, rowObject) {
        var Id = rowObject.id;
        if (rowObject.status == 1)
            return '<a href=""/Sales/NewSalesOrder?Id=' + Id + '"" style=""color:green"" class=""fa fas fa-edit""></a>';
        return '<a href=""#"" style=""color:red"" class=""fa fas fa-edit""></a>';

    }
    function adddelete(cellvalue, options, rowObject) {
        var Id = rowObject.id;
        return '<a href=""javascript:Cancelorder(' + Id + '); ""  class=""fa fas fa-trash""></a>';


    }
    function Cancelorder(Id) {
        if (confirm(""Are you sure want to cancel the order"")) {
 ");
            WriteLiteral(@"           $.ajax({
                url: '/Sales/CancelSalesOrder',
                type: 'GET',
                dataType: 'json',
                data: { Id: Id },
                success: function () {
                    window.location.href = '/Sales/SalesOrderLoad';
                },
                error: function () {
                    console.log('err')
                }
            });
        }
    }
    function printInvoice(cellvalue, options, rowObject) {
        var Id = rowObject.id;
        return '<a href=""javascript:Print(' + Id + '); ""  class=""fa fas fa-print""></a>';
    }
    function Print(Id) {
        var wnd = window.open("""", """", ""_blank"");
        $.ajax({
            url: ""/Sales/GetSalesOrderDetails?SalesOrderId="" + Id,
            type: 'GET',
            success: function (response) {
                var html = '<!DOCTYPE html><html lang = ""en""><head><meta charset=""utf-8""><title></title><link rel=""stylesheet"" href=""/css/Invoicestyle.css"" media=""all"" /></");
            WriteLiteral(@"head><body>';
                var formatted = $.datepicker.formatDate(""M d, yy"", new Date(response.rows[0].salesOrder.orderdate));
                html += '<header class=""clearfix""><img src=""/images/InvoiceHeader.jpeg""><h1>Quotation</h1><div id=""company"" class=""clearfix""><div>' + response.rows[0].salesOrder.refno + '</div><div>' + formatted + '</div><div></div><div></div></div>';
                var total = 0;
                html += '<div id=""project""><div>' + response.rows[0].salesOrder.customer.customerName + '</div><div>' + response.rows[0].salesOrder.customer.customerAddress + '</div><div>' + response.rows[0].salesOrder.customer.zipcode + ',' + response.rows[0].salesOrder.customer.city.name + '</div><div>' + response.rows[0].salesOrder.customer.license + ',' + response.rows[0].salesOrder.customer.taxNo + '</div><div>' + response.rows[0].salesOrder.customer.supportMail + ',' + response.rows[0].salesOrder.customer.supportNo + '</div>';
                html += '</header><main><table><thead><tr><th clas");
            WriteLiteral(@"s=""desc"">ItemName</th><th class=""desc"">Comments</th><th>PRICE</th><th>QTY</th><th>TOTAL</th></tr></thead><tbody>';
                for (var i = 0; i < response.rows.length; i++) {
                    html += '<tr><td class=""desc"">' + response.rows[i].itemMaster.itemName + '</td><td class=""desc"">' + response.rows[i].comments + '</td><td class=""unit"">' + response.rows[i].amount + '</td><td class=""qty"">' + response.rows[i].qty + '</td><td class=""total"">' + response.rows[i].amount * response.rows[i].qty + '</td></tr>';
                    total += response.rows[i].amount * response.rows[i].qty;
                }
                //html += '<tr><td class=""service"">Development</td><td class=""desc"">Developing a Content Management System-based Website</td><td class=""unit"">$40.00</td><td class=""qty"">80</td><td class=""total"">$3,200.00</td></tr>';
                html += '<tr><td colspan=""4"" class=""grand total"">ITEM TOTAL</td><td class=""grand total"">' + total + '</td></tr>';
                html += '<tr><tr><td co");
            WriteLiteral(@"lspan=""4"" class=""grand total"">DISCOUNT</td><td class=""grand total"">' + response.rows[0].salesOrder.discount + '</td></tr>';
                html += '<tr><td colspan=""4"" class=""grand total"">GRAND TOTAL</td><td class=""grand total"">' + total - response.rows[0].salesOrder.discount + '</td></tr>';
                html += '</tbody></table><div id=""notices""><div>Notes:</div><div class=""notice"">' + response.rows[0].salesOrder.details + '</div></div></main>';
                html += '<footer><img src=""/images/InvoiceFooter.jpeg""></footer></body></html>';
                wnd.document.write(html);
            },
            error: function (xhr) {
                alert(""Something went wrong, please try again"");
            }
        });

    }
    $.ajax({
        url: '/Company/GetCustomer',
        type: 'GET',
        dataType: 'json',
        success: function (data) {
            var divstring = '<option Value=""0"">Select All</option>';
            $('#serCustomer').empty();
            for (var i");
            WriteLiteral(@" = 0; i < data.rows.length; i++) {
                divstring += '<option Value=""' + data.rows[i].id + '"">' + data.rows[i].customerName + '</option>';
            }
            $('#serCustomer').append(divstring);
        },
        error: function () {
            console.log('err')
        }
    });
    $(document).ready(function () {
        jQuery('.select2').select2()
    });


</script>
");
            EndContext();
        }
        #pragma warning restore 1998
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.ViewFeatures.IModelExpressionProvider ModelExpressionProvider { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IUrlHelper Url { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.IViewComponentHelper Component { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IJsonHelper Json { get; private set; }
        [global::Microsoft.AspNetCore.Mvc.Razor.Internal.RazorInjectAttribute]
        public global::Microsoft.AspNetCore.Mvc.Rendering.IHtmlHelper<dynamic> Html { get; private set; }
    }
}
#pragma warning restore 1591
