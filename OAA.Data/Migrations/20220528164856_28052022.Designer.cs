// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SC.Data;

namespace SC.Data.Migrations
{
    [DbContext(typeof(ApplicationContext))]
    [Migration("20220528164856_28052022")]
    partial class _28052022
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.14-servicing-32113")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("SC.Data.ApplicationUser", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CompanyId");

                    b.Property<string>("ContentType");

                    b.Property<DateTime>("CreatedOn");

                    b.Property<string>("Email");

                    b.Property<string>("Extension");

                    b.Property<string>("FirstName");

                    b.Property<Guid>("Guid");

                    b.Property<byte[]>("ImageAttachment");

                    b.Property<string>("LastName");

                    b.Property<byte[]>("PasswordHash");

                    b.Property<byte[]>("PasswordSalt");

                    b.Property<string>("PhoneNumber");

                    b.Property<int>("Status");

                    b.Property<long>("UserTypeId");

                    b.Property<string>("Username");

                    b.Property<string>("sex");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId")
                        .IsUnique()
                        .HasFilter("[CompanyId] IS NOT NULL");

                    b.HasIndex("UserTypeId");

                    b.ToTable("ApplicationUser");
                });

            modelBuilder.Entity("SC.Data.Asset", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AssetCategoryId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<string>("code");

                    b.Property<string>("name");

                    b.HasKey("Id");

                    b.HasIndex("AssetCategoryId");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("Asset");
                });

            modelBuilder.Entity("SC.Data.AssetCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<long>("coaId");

                    b.Property<string>("code");

                    b.Property<string>("name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("coaId");

                    b.ToTable("AssetCategory");
                });

            modelBuilder.Entity("SC.Data.Bank", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BankcategoryId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<long>("CurrencyId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<string>("accno");

                    b.Property<string>("bankname");

                    b.Property<string>("code");

                    b.Property<double>("cr");

                    b.Property<double>("dr");

                    b.Property<long>("partnerId");

                    b.Property<string>("swiftcode");

                    b.HasKey("Id");

                    b.HasIndex("BankcategoryId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("partnerId");

                    b.ToTable("Bank");
                });

            modelBuilder.Entity("SC.Data.Bankcategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<long>("coaId");

                    b.Property<string>("code");

                    b.Property<string>("name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("coaId");

                    b.ToTable("Bankcategory");
                });

            modelBuilder.Entity("SC.Data.BankTxn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BankId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<double>("amount");

                    b.Property<string>("narration");

                    b.Property<string>("refno");

                    b.Property<DateTime>("trandate");

                    b.Property<string>("transno");

                    b.Property<int>("trantype");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("BankTxn");
                });

            modelBuilder.Entity("SC.Data.Branch", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BranchGroupId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<string>("code");

                    b.Property<string>("name");

                    b.HasKey("Id");

                    b.HasIndex("BranchGroupId");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("Branch");
                });

            modelBuilder.Entity("SC.Data.BranchGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<string>("code");

                    b.Property<string>("name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("BranchGroup");
                });

            modelBuilder.Entity("SC.Data.City", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<string>("Name");

                    b.Property<long>("StateId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("StateId");

                    b.ToTable("City");
                });

            modelBuilder.Entity("SC.Data.coa", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("COATypeId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<string>("code");

                    b.Property<string>("name");

                    b.Property<int>("odr");

                    b.HasKey("Id");

                    b.HasIndex("COATypeId");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("coa");
                });

            modelBuilder.Entity("SC.Data.Coabase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<string>("code");

                    b.Property<int>("fs");

                    b.Property<string>("name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("Coabase");
                });

            modelBuilder.Entity("SC.Data.COAType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CoabaseId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<string>("code");

                    b.Property<string>("name");

                    b.Property<int>("odr");

                    b.HasKey("Id");

                    b.HasIndex("CoabaseId");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("COAType");
                });

            modelBuilder.Entity("SC.Data.Company", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CityId");

                    b.Property<string>("CompanyAddress");

                    b.Property<string>("CompanyName");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("Details");

                    b.Property<string>("IpAddress");

                    b.Property<string>("Lattitude");

                    b.Property<string>("License");

                    b.Property<string>("Longitude");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<string>("Otherreg");

                    b.Property<DateTime>("StartedIn");

                    b.Property<int>("Status");

                    b.Property<string>("SupportMail");

                    b.Property<string>("SupportNo");

                    b.Property<string>("TaxNo");

                    b.Property<string>("Zipcode");

                    b.Property<string>("image");

                    b.Property<string>("shortname");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("SC.Data.CompanyContact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CompanyId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<string>("Mail");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<string>("Name");

                    b.Property<string>("Notes");

                    b.Property<string>("Number");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("CompanyContact");
                });

            modelBuilder.Entity("SC.Data.Country", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CountryName");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("Country");
                });

            modelBuilder.Entity("SC.Data.CreditCard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("BankId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<long>("categoryId");

                    b.Property<string>("code");

                    b.Property<double>("cr");

                    b.Property<string>("details");

                    b.Property<double>("dr");

                    b.Property<string>("number");

                    b.Property<long>("partnerId");

                    b.HasKey("Id");

                    b.HasIndex("BankId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("categoryId");

                    b.HasIndex("partnerId");

                    b.ToTable("CreditCard");
                });

            modelBuilder.Entity("SC.Data.CreditCardcategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<long>("coaId");

                    b.Property<string>("code");

                    b.Property<string>("name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("coaId");

                    b.ToTable("CreditCardcategory");
                });

            modelBuilder.Entity("SC.Data.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<string>("name");

                    b.Property<double>("roe");

                    b.Property<string>("smallunit");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("Currency");
                });

            modelBuilder.Entity("SC.Data.Customer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CityId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<long>("CurrencyId");

                    b.Property<string>("CustomerAddress");

                    b.Property<string>("CustomerName");

                    b.Property<string>("Details");

                    b.Property<string>("IpAddress");

                    b.Property<string>("Lattitude");

                    b.Property<string>("License");

                    b.Property<string>("Longitude");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<string>("Otherreg");

                    b.Property<DateTime>("StartedIn");

                    b.Property<int>("Status");

                    b.Property<string>("SupportMail");

                    b.Property<string>("SupportNo");

                    b.Property<string>("TaxNo");

                    b.Property<string>("Zipcode");

                    b.Property<string>("code");

                    b.Property<double>("cr");

                    b.Property<int>("creditdays");

                    b.Property<double>("creditlimit");

                    b.Property<long>("customercategoryId");

                    b.Property<long>("customergroupId");

                    b.Property<double>("dr");

                    b.Property<string>("image");

                    b.Property<long>("partnerId");

                    b.Property<string>("shortname");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("customercategoryId");

                    b.HasIndex("customergroupId");

                    b.HasIndex("partnerId");

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("SC.Data.customercategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<long>("coaId");

                    b.Property<string>("code");

                    b.Property<string>("name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("coaId");

                    b.ToTable("customercategory");
                });

            modelBuilder.Entity("SC.Data.CustomerContact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<long>("CustomerId");

                    b.Property<string>("IpAddress");

                    b.Property<string>("Mail");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<string>("Name");

                    b.Property<string>("Notes");

                    b.Property<string>("Number");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerContact");
                });

            modelBuilder.Entity("SC.Data.customergroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<string>("code");

                    b.Property<string>("name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("customergroup");
                });

            modelBuilder.Entity("SC.Data.CustomerUserAssign", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("AssignedUserId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<long>("CustomerId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<int>("assignedDay");

                    b.HasKey("Id");

                    b.HasIndex("AssignedUserId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("CustomerId");

                    b.ToTable("CustomerUserAssign");
                });

            modelBuilder.Entity("SC.Data.defaultaccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<long>("ledgerId");

                    b.Property<string>("name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ledgerId");

                    b.ToTable("defaultaccount");
                });

            modelBuilder.Entity("SC.Data.DeliveryItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("Amount");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("FromAddress");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<string>("OrderNo");

                    b.Property<int>("Status");

                    b.Property<string>("ToAddress");

                    b.Property<string>("details");

                    b.Property<long?>("userAssignedId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("userAssignedId");

                    b.ToTable("DeliveryItem");
                });

            modelBuilder.Entity("SC.Data.Department", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<long>("DepartmentGroupId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<string>("code");

                    b.Property<string>("name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DepartmentGroupId");

                    b.ToTable("Department");
                });

            modelBuilder.Entity("SC.Data.DepartmentGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<string>("code");

                    b.Property<string>("name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("DepartmentGroup");
                });

            modelBuilder.Entity("SC.Data.Designation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<long>("DesignationGroupsId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<string>("code");

                    b.Property<string>("name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DesignationGroupsId");

                    b.ToTable("Designation");
                });

            modelBuilder.Entity("SC.Data.DesignationGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<string>("code");

                    b.Property<string>("name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("DesignationGroup");
                });

            modelBuilder.Entity("SC.Data.Employee", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<long>("DepartmentId");

                    b.Property<long>("DesignationId");

                    b.Property<long>("EmployeeCategoryId");

                    b.Property<long>("EmployeeGroupId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<string>("code");

                    b.Property<double>("cr");

                    b.Property<DateTime?>("dob");

                    b.Property<DateTime?>("doj");

                    b.Property<double>("dr");

                    b.Property<string>("firstname");

                    b.Property<string>("lastname");

                    b.Property<string>("mail");

                    b.Property<string>("middlename");

                    b.Property<long>("partnerId");

                    b.Property<string>("phone");

                    b.Property<string>("salutation");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DepartmentId");

                    b.HasIndex("DesignationId");

                    b.HasIndex("EmployeeCategoryId");

                    b.HasIndex("EmployeeGroupId");

                    b.HasIndex("partnerId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("SC.Data.EmployeeCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<long>("coaId");

                    b.Property<string>("code");

                    b.Property<string>("name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("coaId");

                    b.ToTable("EmployeeCategory");
                });

            modelBuilder.Entity("SC.Data.EmployeeGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<string>("code");

                    b.Property<string>("name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("EmployeeGroup");
                });

            modelBuilder.Entity("SC.Data.FinanceYear", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<DateTime>("FromDate");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<DateTime>("ToDate");

                    b.Property<string>("YearName");

                    b.Property<bool>("iscurrent");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("FinanceYear");
                });

            modelBuilder.Entity("SC.Data.ItemBrand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<string>("brnadname");

                    b.Property<string>("details");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("ItemBrand");
                });

            modelBuilder.Entity("SC.Data.ItemCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("CategoryName");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<string>("code");

                    b.Property<string>("image");

                    b.Property<string>("notes");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("ItemCategory");
                });

            modelBuilder.Entity("SC.Data.ItemImage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<long>("ItemMasterId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<int>("sortorder");

                    b.Property<string>("thumb");

                    b.Property<string>("zoom");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ItemMasterId");

                    b.ToTable("ItemImage");
                });

            modelBuilder.Entity("SC.Data.ItemMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<double>("BaqalaPrice");

                    b.Property<string>("BarCode");

                    b.Property<long>("CategoryId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("Description");

                    b.Property<string>("IpAddress");

                    b.Property<long>("ItemBrandId");

                    b.Property<string>("ItemCode");

                    b.Property<string>("ItemName");

                    b.Property<double>("Maxqty");

                    b.Property<double>("MobilePrice");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<double>("Offerprice");

                    b.Property<double>("Price");

                    b.Property<string>("ProductCode");

                    b.Property<double>("PurPrice");

                    b.Property<double>("SalesPrice");

                    b.Property<bool>("Showcart");

                    b.Property<bool>("Showsite");

                    b.Property<double>("StationaryPrice");

                    b.Property<int>("Status");

                    b.Property<long>("TaxMasterId");

                    b.Property<double>("qty");

                    b.Property<double>("rol");

                    b.Property<int>("type");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ItemBrandId");

                    b.HasIndex("TaxMasterId");

                    b.ToTable("ItemMaster");
                });

            modelBuilder.Entity("SC.Data.ledger", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<long>("coaId");

                    b.Property<string>("details");

                    b.Property<string>("name");

                    b.Property<long>("partnerId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("coaId");

                    b.HasIndex("partnerId");

                    b.ToTable("ledger");
                });

            modelBuilder.Entity("SC.Data.ledgertxn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<double>("cr");

                    b.Property<string>("details");

                    b.Property<double>("dr");

                    b.Property<long>("ledgerId");

                    b.Property<DateTime>("txndate");

                    b.Property<string>("txnno");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ledgerId");

                    b.ToTable("ledgertxn");
                });

            modelBuilder.Entity("SC.Data.MotherCompany", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CityId");

                    b.Property<string>("CompanyAddress");

                    b.Property<string>("CompanyName");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("Details");

                    b.Property<string>("IpAddress");

                    b.Property<string>("License");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<string>("Otherreg");

                    b.Property<DateTime>("StartedIn");

                    b.Property<int>("Status");

                    b.Property<string>("SupportMail");

                    b.Property<string>("SupportNo");

                    b.Property<string>("TaxNo");

                    b.Property<string>("Zipcode");

                    b.Property<string>("image");

                    b.Property<string>("shortname");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("MotherCompany");
                });

            modelBuilder.Entity("SC.Data.partner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<string>("code");

                    b.Property<string>("details");

                    b.Property<string>("name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("partner");
                });

            modelBuilder.Entity("SC.Data.Payment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<double>("amount");

                    b.Property<double>("balance");

                    b.Property<long>("ledgerId");

                    b.Property<string>("narration");

                    b.Property<string>("refno");

                    b.Property<DateTime>("trandate");

                    b.Property<string>("transno");

                    b.Property<int>("trantype");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ledgerId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("SC.Data.PaymentTransactions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<long>("PaymentId");

                    b.Property<int>("Status");

                    b.Property<double>("amount");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("PaymentId");

                    b.ToTable("PaymentTransactions");
                });

            modelBuilder.Entity("SC.Data.Purchase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<double>("Discount");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("Isvat");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<long>("SupplierId");

                    b.Property<double>("Total");

                    b.Property<int>("Type");

                    b.Property<double>("balance");

                    b.Property<string>("details");

                    b.Property<string>("invoiceno");

                    b.Property<DateTime>("orderdate");

                    b.Property<string>("refno");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("SupplierId");

                    b.ToTable("Purchase");
                });

            modelBuilder.Entity("SC.Data.PurchaseDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<long>("ItemMasterId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<long>("PurchaseOrderId");

                    b.Property<int>("Status");

                    b.Property<double>("amount");

                    b.Property<string>("comments");

                    b.Property<double>("qty");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ItemMasterId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("PurchaseDetail");
                });

            modelBuilder.Entity("SC.Data.purchasepaiddetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<long>("PurchaseOrderId");

                    b.Property<int>("Status");

                    b.Property<double>("amount");

                    b.Property<string>("details");

                    b.Property<DateTime>("paiddate");

                    b.Property<string>("voucherno");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("PurchaseOrderId");

                    b.ToTable("purchasepaiddetail");
                });

            modelBuilder.Entity("SC.Data.purchasereturn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<long>("PurchaseId");

                    b.Property<int>("Status");

                    b.Property<double>("Total");

                    b.Property<string>("details");

                    b.Property<string>("invoiceno");

                    b.Property<DateTime>("retdate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("PurchaseId");

                    b.ToTable("purchasereturn");
                });

            modelBuilder.Entity("SC.Data.purchasereturnDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<long>("ItemMasterId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<double>("amount");

                    b.Property<long>("purchasereturnId");

                    b.Property<double>("qty");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ItemMasterId");

                    b.HasIndex("purchasereturnId");

                    b.ToTable("purchasereturnDetail");
                });

            modelBuilder.Entity("SC.Data.Receipt", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<double>("amount");

                    b.Property<double>("balance");

                    b.Property<long>("ledgerId");

                    b.Property<string>("narration");

                    b.Property<string>("refno");

                    b.Property<DateTime>("trandate");

                    b.Property<string>("transno");

                    b.Property<int>("trantype");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ledgerId");

                    b.ToTable("Receipt");
                });

            modelBuilder.Entity("SC.Data.ReceiptTransactions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<long>("ReceiptId");

                    b.Property<int>("Status");

                    b.Property<double>("amount");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ReceiptId");

                    b.ToTable("ReceiptTransactions");
                });

            modelBuilder.Entity("SC.Data.salereturn", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<long>("SalesId");

                    b.Property<int>("Status");

                    b.Property<double>("Total");

                    b.Property<string>("details");

                    b.Property<string>("invoiceno");

                    b.Property<DateTime>("retdate");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("SalesId");

                    b.ToTable("salereturn");
                });

            modelBuilder.Entity("SC.Data.salereturnDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<long>("ItemMasterId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<double>("amount");

                    b.Property<double>("qty");

                    b.Property<long>("salereturnId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ItemMasterId");

                    b.HasIndex("salereturnId");

                    b.ToTable("salereturnDetail");
                });

            modelBuilder.Entity("SC.Data.Sales", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<long>("CustomerId");

                    b.Property<double>("Discount");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("Isvat");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<long?>("SalesOrderId");

                    b.Property<int>("Status");

                    b.Property<double>("Total");

                    b.Property<int>("Type");

                    b.Property<double>("balance");

                    b.Property<string>("details");

                    b.Property<string>("invoiceno");

                    b.Property<string>("lpono");

                    b.Property<DateTime>("salesdate");

                    b.Property<string>("statusChange");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("Sales");
                });

            modelBuilder.Entity("SC.Data.SalesDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<long>("ItemMasterId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<long>("SalesId");

                    b.Property<int>("Status");

                    b.Property<double>("amount");

                    b.Property<string>("comments");

                    b.Property<double>("cost");

                    b.Property<double>("qty");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ItemMasterId");

                    b.HasIndex("SalesId");

                    b.ToTable("SalesDetail");
                });

            modelBuilder.Entity("SC.Data.SalesOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ContactName");

                    b.Property<string>("ContactNumber");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<long>("CustomerId");

                    b.Property<string>("Delivery");

                    b.Property<double>("Discount");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<double>("Total");

                    b.Property<int>("Type");

                    b.Property<string>("details");

                    b.Property<string>("lpono");

                    b.Property<DateTime>("orderdate");

                    b.Property<string>("refno");

                    b.Property<string>("statusChange");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("CustomerId");

                    b.ToTable("SalesOrder");
                });

            modelBuilder.Entity("SC.Data.SalesOrderDetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<long>("ItemMasterId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<long>("SalesOrderId");

                    b.Property<int>("Status");

                    b.Property<double>("amount");

                    b.Property<string>("comments");

                    b.Property<double>("qty");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ItemMasterId");

                    b.HasIndex("SalesOrderId");

                    b.ToTable("SalesOrderDetail");
                });

            modelBuilder.Entity("SC.Data.Salespaiddetail", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<long>("SalesId");

                    b.Property<int>("Status");

                    b.Property<double>("amount");

                    b.Property<string>("details");

                    b.Property<DateTime>("paiddate");

                    b.Property<string>("voucherno");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("SalesId");

                    b.ToTable("Salespaiddetail");
                });

            modelBuilder.Entity("SC.Data.ScrollText", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<string>("text");

                    b.Property<long>("type");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("ScrollText");
                });

            modelBuilder.Entity("SC.Data.service", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<string>("code");

                    b.Property<string>("name");

                    b.Property<long>("servicetypeId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("servicetypeId");

                    b.ToTable("service");
                });

            modelBuilder.Entity("SC.Data.servicetype", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<long>("coaId");

                    b.Property<string>("code");

                    b.Property<string>("name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("coaId");

                    b.ToTable("servicetype");
                });

            modelBuilder.Entity("SC.Data.State", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CountryId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.HasIndex("CountryId");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("State");
                });

            modelBuilder.Entity("SC.Data.StockMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<long>("ItemMasterId");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<double>("PurPrice");

                    b.Property<int>("Status");

                    b.Property<double>("stock");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ItemMasterId");

                    b.ToTable("StockMaster");
                });

            modelBuilder.Entity("SC.Data.Store", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CityId");

                    b.Property<long>("CompanyId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("Details");

                    b.Property<string>("IpAddress");

                    b.Property<string>("Lattitude");

                    b.Property<string>("Longitude");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<string>("StoreAddress");

                    b.Property<string>("StoreName");

                    b.Property<string>("Zipcode");

                    b.Property<string>("code");

                    b.Property<string>("shortname");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("Store");
                });

            modelBuilder.Entity("SC.Data.Supplier", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long>("CityId");

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<long>("CurrencyId");

                    b.Property<string>("Details");

                    b.Property<string>("IpAddress");

                    b.Property<string>("Lattitude");

                    b.Property<string>("License");

                    b.Property<string>("Longitude");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<string>("Otherreg");

                    b.Property<DateTime?>("StartedIn");

                    b.Property<int>("Status");

                    b.Property<string>("SupplierAddress");

                    b.Property<string>("SupplierName");

                    b.Property<string>("SupportMail");

                    b.Property<string>("SupportNo");

                    b.Property<string>("TaxNo");

                    b.Property<string>("Zipcode");

                    b.Property<long>("categoryId");

                    b.Property<string>("code");

                    b.Property<double>("cr");

                    b.Property<int>("creditdays");

                    b.Property<double>("creditlimit");

                    b.Property<double>("dr");

                    b.Property<string>("image");

                    b.Property<long>("partnerId");

                    b.Property<string>("shortname");

                    b.Property<long>("suppliergroupId");

                    b.HasKey("Id");

                    b.HasIndex("CityId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("CurrencyId");

                    b.HasIndex("categoryId");

                    b.HasIndex("partnerId");

                    b.HasIndex("suppliergroupId");

                    b.ToTable("Supplier");
                });

            modelBuilder.Entity("SC.Data.suppliercategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<long>("coaId");

                    b.Property<string>("code");

                    b.Property<string>("name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("coaId");

                    b.ToTable("suppliercategory");
                });

            modelBuilder.Entity("SC.Data.SupplierContact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<string>("Mail");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<string>("Name");

                    b.Property<string>("Notes");

                    b.Property<string>("Number");

                    b.Property<int>("Status");

                    b.Property<long>("SupplierId");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("SupplierId");

                    b.ToTable("SupplierContact");
                });

            modelBuilder.Entity("SC.Data.suppliergroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<string>("code");

                    b.Property<string>("name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("suppliergroup");
                });

            modelBuilder.Entity("SC.Data.Task", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<string>("details");

                    b.Property<string>("name");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("Task");
                });

            modelBuilder.Entity("SC.Data.TaxMaster", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<string>("TaxName");

                    b.Property<string>("notes");

                    b.Property<double>("percentage");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.ToTable("TaxMaster");
                });

            modelBuilder.Entity("SC.Data.UserPagesAssigned", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("CreatedDate");

                    b.Property<long>("CreatedUserId");

                    b.Property<string>("IpAddress");

                    b.Property<bool>("IsActive");

                    b.Property<DateTime>("ModifiedDate");

                    b.Property<long>("ModifiedUserId");

                    b.Property<int>("Status");

                    b.Property<long>("UserId");

                    b.Property<string>("pagename");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserPagesAssigned");
                });

            modelBuilder.Entity("SC.Data.UserType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Name");

                    b.Property<int>("Status");

                    b.HasKey("Id");

                    b.ToTable("UserType");
                });

            modelBuilder.Entity("SC.Data.ApplicationUser", b =>
                {
                    b.HasOne("SC.Data.Company", "Company")
                        .WithOne()
                        .HasForeignKey("SC.Data.ApplicationUser", "CompanyId");

                    b.HasOne("SC.Data.UserType", "UserType")
                        .WithMany()
                        .HasForeignKey("UserTypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.Asset", b =>
                {
                    b.HasOne("SC.Data.AssetCategory", "AssetCategory")
                        .WithMany()
                        .HasForeignKey("AssetCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.AssetCategory", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.coa", "coa")
                        .WithMany()
                        .HasForeignKey("coaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.Bank", b =>
                {
                    b.HasOne("SC.Data.Bankcategory", "Bankcategory")
                        .WithMany()
                        .HasForeignKey("BankcategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.partner", "partner")
                        .WithMany()
                        .HasForeignKey("partnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.Bankcategory", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.coa", "coa")
                        .WithMany()
                        .HasForeignKey("coaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.BankTxn", b =>
                {
                    b.HasOne("SC.Data.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.Branch", b =>
                {
                    b.HasOne("SC.Data.BranchGroup", "BranchGroup")
                        .WithMany()
                        .HasForeignKey("BranchGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.BranchGroup", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.City", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.State", "State")
                        .WithMany()
                        .HasForeignKey("StateId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.coa", b =>
                {
                    b.HasOne("SC.Data.COAType", "COAType")
                        .WithMany()
                        .HasForeignKey("COATypeId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.Coabase", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.COAType", b =>
                {
                    b.HasOne("SC.Data.Coabase", "Coabase")
                        .WithMany()
                        .HasForeignKey("CoabaseId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.Company", b =>
                {
                    b.HasOne("SC.Data.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.CompanyContact", b =>
                {
                    b.HasOne("SC.Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.Country", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.CreditCard", b =>
                {
                    b.HasOne("SC.Data.Bank", "Bank")
                        .WithMany()
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.CreditCardcategory", "CreditCardcategory")
                        .WithMany()
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.partner", "partner")
                        .WithMany()
                        .HasForeignKey("partnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.CreditCardcategory", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.coa", "coa")
                        .WithMany()
                        .HasForeignKey("coaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.Currency", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.Customer", b =>
                {
                    b.HasOne("SC.Data.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.customercategory", "customercategory")
                        .WithMany()
                        .HasForeignKey("customercategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.customergroup", "customergroup")
                        .WithMany()
                        .HasForeignKey("customergroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.partner", "partner")
                        .WithMany()
                        .HasForeignKey("partnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.customercategory", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.coa", "coa")
                        .WithMany()
                        .HasForeignKey("coaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.CustomerContact", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.customergroup", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.CustomerUserAssign", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "AssignedUser")
                        .WithMany()
                        .HasForeignKey("AssignedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.defaultaccount", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.ledger", "ledger")
                        .WithMany()
                        .HasForeignKey("ledgerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.DeliveryItem", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.ApplicationUser", "UserAssigned")
                        .WithMany()
                        .HasForeignKey("userAssignedId");
                });

            modelBuilder.Entity("SC.Data.Department", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.DepartmentGroup", "DepartmentGroup")
                        .WithMany()
                        .HasForeignKey("DepartmentGroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.DepartmentGroup", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.Designation", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.DesignationGroup", "DesignationGroup")
                        .WithMany()
                        .HasForeignKey("DesignationGroupsId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.DesignationGroup", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.Employee", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.Designation", "Designation")
                        .WithMany()
                        .HasForeignKey("DesignationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.EmployeeCategory", "EmployeeCategory")
                        .WithMany()
                        .HasForeignKey("EmployeeCategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.EmployeeGroup", "EmployeeGroup")
                        .WithMany()
                        .HasForeignKey("EmployeeGroupId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.partner", "partner")
                        .WithMany()
                        .HasForeignKey("partnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.EmployeeCategory", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.coa", "coa")
                        .WithMany()
                        .HasForeignKey("coaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.EmployeeGroup", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.FinanceYear", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.ItemBrand", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.ItemCategory", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.ItemImage", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.ItemMaster", "ItemMaster")
                        .WithMany()
                        .HasForeignKey("ItemMasterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.ItemMaster", b =>
                {
                    b.HasOne("SC.Data.ItemCategory", "ItemCategory")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.ItemBrand", "ItemBrand")
                        .WithMany()
                        .HasForeignKey("ItemBrandId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.TaxMaster", "TaxMaster")
                        .WithMany()
                        .HasForeignKey("TaxMasterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.ledger", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.coa", "coa")
                        .WithMany()
                        .HasForeignKey("coaId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.partner", "partner")
                        .WithMany()
                        .HasForeignKey("partnerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.ledgertxn", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.ledger", "ledger")
                        .WithMany()
                        .HasForeignKey("ledgerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.MotherCompany", b =>
                {
                    b.HasOne("SC.Data.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.partner", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.Payment", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.ledger", "ledger")
                        .WithMany()
                        .HasForeignKey("ledgerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.PaymentTransactions", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.Payment", "Payment")
                        .WithMany()
                        .HasForeignKey("PaymentId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.Purchase", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.PurchaseDetail", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.ItemMaster", "ItemMaster")
                        .WithMany()
                        .HasForeignKey("ItemMasterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.Purchase", "Purchase")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.purchasepaiddetail", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.Purchase", "Purchase")
                        .WithMany()
                        .HasForeignKey("PurchaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.purchasereturn", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.Purchase", "Purchase")
                        .WithMany()
                        .HasForeignKey("PurchaseId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.purchasereturnDetail", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.ItemMaster", "ItemMaster")
                        .WithMany()
                        .HasForeignKey("ItemMasterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.purchasereturn", "purchasereturn")
                        .WithMany()
                        .HasForeignKey("purchasereturnId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.Receipt", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.ledger", "ledger")
                        .WithMany()
                        .HasForeignKey("ledgerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.ReceiptTransactions", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.Receipt", "Receipt")
                        .WithMany()
                        .HasForeignKey("ReceiptId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.salereturn", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.Sales", "Sales")
                        .WithMany()
                        .HasForeignKey("SalesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.salereturnDetail", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.ItemMaster", "ItemMaster")
                        .WithMany()
                        .HasForeignKey("ItemMasterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.salereturn", "salereturn")
                        .WithMany()
                        .HasForeignKey("salereturnId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.Sales", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.SalesOrder", "SalesOrder")
                        .WithMany()
                        .HasForeignKey("SalesOrderId");
                });

            modelBuilder.Entity("SC.Data.SalesDetail", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.ItemMaster", "ItemMaster")
                        .WithMany()
                        .HasForeignKey("ItemMasterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.Sales", "Sales")
                        .WithMany()
                        .HasForeignKey("SalesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.SalesOrder", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.SalesOrderDetail", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.ItemMaster", "ItemMaster")
                        .WithMany()
                        .HasForeignKey("ItemMasterId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.SalesOrder", "SalesOrder")
                        .WithMany()
                        .HasForeignKey("SalesOrderId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.Salespaiddetail", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.Sales", "Sales")
                        .WithMany()
                        .HasForeignKey("SalesId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.ScrollText", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.service", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.servicetype", "servicetype")
                        .WithMany()
                        .HasForeignKey("servicetypeId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.servicetype", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.coa", "coa")
                        .WithMany()
                        .HasForeignKey("coaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.State", b =>
                {
                    b.HasOne("SC.Data.Country", "Country")
                        .WithMany()
                        .HasForeignKey("CountryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.StockMaster", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.ItemMaster", "ItemMaster")
                        .WithMany()
                        .HasForeignKey("ItemMasterId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.Store", b =>
                {
                    b.HasOne("SC.Data.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.Supplier", b =>
                {
                    b.HasOne("SC.Data.City", "City")
                        .WithMany()
                        .HasForeignKey("CityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.suppliercategory", "suppliercategory")
                        .WithMany()
                        .HasForeignKey("categoryId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.partner", "partner")
                        .WithMany()
                        .HasForeignKey("partnerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.suppliergroup", "suppliergroup")
                        .WithMany()
                        .HasForeignKey("suppliergroupId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.suppliercategory", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.coa", "coa")
                        .WithMany()
                        .HasForeignKey("coaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.SupplierContact", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.Supplier", "Supplier")
                        .WithMany()
                        .HasForeignKey("SupplierId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.suppliergroup", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.Task", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.TaxMaster", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("SC.Data.UserPagesAssigned", b =>
                {
                    b.HasOne("SC.Data.ApplicationUser", "ApplicationUser")
                        .WithMany()
                        .HasForeignKey("CreatedUserId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("SC.Data.ApplicationUser", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
